argoNamespace: argo-cd
certManager:
  enabled: true
  targetRevision: "~1.7.1"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  values:
    installCRDs: true
  dnsSecret:
    enabled: true
    name: ""
    stringData: ""
    data: ""
  clusterIssuer:
    acme:
      staging: true
      email: ""
    solvers: []
  wildcardCert:
    duration: 2160h0m0s
    renewBefore: 360h0m0s
    subject: {}
    commonName: ""
    organizations: []
    privateKey:
      size: 2048
      algorithm: RSA
      encoding: PKCS1
    usages:
      - server auth
      - client auth
    dnsNames: []
clusterAutoscaler:
  enabled: false
  targetRevision: "~9.16.1"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  values:
    # hardcode aws values and fields, because other hosted k8s platforms won't
    # require the cluster autoscaler
    cloudProvider: aws
    awsRegion: replaceme
    autoDiscovery:
      clusterName: replaceme
    rbac:
      serviceAccount:
        annotations: {}
          # eks.amazonaws.com/role-arn: arn:aws:iam::account-id:role/iam-role-name
        # hardcode service account name to make IRSA configuration simpler
        name: "cluster-autoscaler"
contour:
  enabled: true
  targetRevision: "~7.3.10"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  values:
    envoy:
      resources:
        requests:
          cpu: 250m
          memory: 250M
        limits:
          cpu: 250m
          memory: 500M
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 10
        targetCPU: 70%
externalDns:
  enabled: true
  targetRevision: "~6.1.6"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  values:
    sources:
      - contour-httpproxy
      - ingress
linkerd:
  enabled: true
  targetRevision: "~2.11.1"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  trustAnchor:
    # the identityTrustAnchorsPEM and key should be generated by `step` that has been base64 encoded as a string see https://linkerd.io/2.11/tasks/automatically-rotating-control-plane-tls-credentials/
    # at the time of writing, the crt and key can be generated with the following command `step certificate create root.linkerd.cluster.local ca.crt ca.key --profile root-ca --no-password --insecure`
    # then base64 encode the resulting ca.crt and ca.key files, and use that as the crt and key values here.
    key: ""
  values:
    identityTrustAnchorsPEM: ""
    identity:
      issuer:
        scheme: kubernetes.io/tls
    installNamespace: false
# run `linkerd check` after deployment to make sure viz is working. If checks fail, delete all the pods in the `linkerd-viz` namespace and once they're all healthy again the checks should pass
linkerdViz:
  enabled: true
  targetRevision: "~2.11.1"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
linkerdJaeger:
  enabled: true
  targetRevision: "~2.11.1"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
metricsServer:
  enabled: true
  targetRevision: "~5.11.3"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
pvcAutoresizer:
  enabled: true
  targetRevision: "~0.3.4"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  values:
    args:
      prometheusURL: http://kube-prometheus-stack-prometheus.kube-prometheus-stack
      interval: 10s
sentry:
  enabled: false
  targetRevision: "~13.1.0"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  values:
    global:
      postgresql:
        postgresqlPassword: replaceme
    user:
      password: replaceme
    ingress:
      enabled: false
      ingressClassName: contour
      regexPathStyle: Prefix
      hostname: replaceme
      annotations:
        projectcontour.io/tls-cert-namespace: cert-manager
      tls:
        - secretName: wildcard-certificate
          hosts:
            - replaceme
    rabbitmq:
      enabled: false
    kafka:
      replicaCount: 1
      defaultReplicationFactor: 1
      offsetsTopicReplicationFactor: 1
      transactionStateLogReplicationFactor: 1
      transactionStateLogMinIsr: 1
    redis:
      architecture: standalone
      auth:
        password: replaceme
    clickhouse:
      clickhouse:
        replicas: 1
    sentry:
      worker:
        replicas: 1
    nginx:
      enabled: true
    system:
      url: 'https://replaceme'
      secretKey: replaceme
storageClasses:
  aws:
    gp2:
      name: gp2
      enabled: false
      isDefaultStorageClass: false
    encryptedGp2:
      name: encrypted-gp2
      enabled: false
      isDefaultStorageClass: true
  gke:
    ssd:
      name: ssd
      enabled: false
      isDefaultStorageClass: true
    standard:
      name: standard
      enabled: false
      isDefaultStorageClass: false
